// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// g1_integration_real
double g1_integration_real(double lower, double upper, double h_val, std::complex<double> d, double H);
RcppExport SEXP _carfima_g1_integration_real(SEXP lowerSEXP, SEXP upperSEXP, SEXP h_valSEXP, SEXP dSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type h_val(h_valSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(g1_integration_real(lower, upper, h_val, d, H));
    return rcpp_result_gen;
END_RCPP
}
// g1_integration_imag
double g1_integration_imag(double lower, double upper, double h_val, std::complex<double> d, double H);
RcppExport SEXP _carfima_g1_integration_imag(SEXP lowerSEXP, SEXP upperSEXP, SEXP h_valSEXP, SEXP dSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type h_val(h_valSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(g1_integration_imag(lower, upper, h_val, d, H));
    return rcpp_result_gen;
END_RCPP
}
// g2_integration_real
double g2_integration_real(double lower, double upper, double h_val, std::complex<double> d, double H);
RcppExport SEXP _carfima_g2_integration_real(SEXP lowerSEXP, SEXP upperSEXP, SEXP h_valSEXP, SEXP dSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type h_val(h_valSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(g2_integration_real(lower, upper, h_val, d, H));
    return rcpp_result_gen;
END_RCPP
}
// g2_integration_imag
double g2_integration_imag(double lower, double upper, double h_val, std::complex<double> d, double H);
RcppExport SEXP _carfima_g2_integration_imag(SEXP lowerSEXP, SEXP upperSEXP, SEXP h_valSEXP, SEXP dSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< double >::type h_val(h_valSEXP);
    Rcpp::traits::input_parameter< std::complex<double> >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(g2_integration_imag(lower, upper, h_val, d, H));
    return rcpp_result_gen;
END_RCPP
}
// g1
arma::cx_mat g1(arma::vec h, arma::cx_vec d, double H);
RcppExport SEXP _carfima_g1(SEXP hSEXP, SEXP dSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::cx_vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(g1(h, d, H));
    return rcpp_result_gen;
END_RCPP
}
// g2
arma::cx_mat g2(arma::vec h, arma::cx_vec d, double H);
RcppExport SEXP _carfima_g2(SEXP hSEXP, SEXP dSEXP, SEXP HSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type h(hSEXP);
    Rcpp::traits::input_parameter< arma::cx_vec >::type d(dSEXP);
    Rcpp::traits::input_parameter< double >::type H(HSEXP);
    rcpp_result_gen = Rcpp::wrap(g2(h, d, H));
    return rcpp_result_gen;
END_RCPP
}
// B_mat
arma::mat B_mat(int p, arma::vec alpha);
RcppExport SEXP _carfima_B_mat(SEXP pSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(B_mat(p, alpha));
    return rcpp_result_gen;
END_RCPP
}
// V_mat_sigma
arma::mat V_mat_sigma(int p, arma::vec alpha, double sigma);
RcppExport SEXP _carfima_V_mat_sigma(SEXP pSEXP, SEXP alphaSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(V_mat_sigma(p, alpha, sigma));
    return rcpp_result_gen;
END_RCPP
}
// V_mat
arma::mat V_mat(int p, arma::vec alpha);
RcppExport SEXP _carfima_V_mat(SEXP pSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(V_mat(p, alpha));
    return rcpp_result_gen;
END_RCPP
}
// Gamma_Y
arma::cx_vec Gamma_Y(arma::vec time_lag_cov, int p, arma::mat A, double H, arma::cx_vec beta, arma::vec delta_p);
RcppExport SEXP _carfima_Gamma_Y(SEXP time_lag_covSEXP, SEXP pSEXP, SEXP ASEXP, SEXP HSEXP, SEXP betaSEXP, SEXP delta_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type time_lag_cov(time_lag_covSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cx_vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta_p(delta_pSEXP);
    rcpp_result_gen = Rcpp::wrap(Gamma_Y(time_lag_cov, p, A, H, beta, delta_p));
    return rcpp_result_gen;
END_RCPP
}
// Gamma_Y_sigma
arma::cx_vec Gamma_Y_sigma(arma::vec time_lag_cov, int p, arma::mat A, double H, arma::cx_vec beta, arma::vec delta_p, double sigma);
RcppExport SEXP _carfima_Gamma_Y_sigma(SEXP time_lag_covSEXP, SEXP pSEXP, SEXP ASEXP, SEXP HSEXP, SEXP betaSEXP, SEXP delta_pSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type time_lag_cov(time_lag_covSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< double >::type H(HSEXP);
    Rcpp::traits::input_parameter< arma::cx_vec >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type delta_p(delta_pSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Gamma_Y_sigma(time_lag_cov, p, A, H, beta, delta_p, sigma));
    return rcpp_result_gen;
END_RCPP
}
// cpp_carfima_bayes
Rcpp::List cpp_carfima_bayes(Function loglik, arma::vec Y, arma::vec time, arma::vec param_ini, arma::vec param_scale, int ar_p, int ma_q, int n_warm, int n_sample);
RcppExport SEXP _carfima_cpp_carfima_bayes(SEXP loglikSEXP, SEXP YSEXP, SEXP timeSEXP, SEXP param_iniSEXP, SEXP param_scaleSEXP, SEXP ar_pSEXP, SEXP ma_qSEXP, SEXP n_warmSEXP, SEXP n_sampleSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Function >::type loglik(loglikSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_ini(param_iniSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type param_scale(param_scaleSEXP);
    Rcpp::traits::input_parameter< int >::type ar_p(ar_pSEXP);
    Rcpp::traits::input_parameter< int >::type ma_q(ma_qSEXP);
    Rcpp::traits::input_parameter< int >::type n_warm(n_warmSEXP);
    Rcpp::traits::input_parameter< int >::type n_sample(n_sampleSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_carfima_bayes(loglik, Y, time, param_ini, param_scale, ar_p, ma_q, n_warm, n_sample));
    return rcpp_result_gen;
END_RCPP
}
// cpp_carfima_loglik
Rcpp::List cpp_carfima_loglik(arma::vec Yold, arma::vec time, int p, int q, arma::vec parameter);
RcppExport SEXP _carfima_cpp_carfima_loglik(SEXP YoldSEXP, SEXP timeSEXP, SEXP pSEXP, SEXP qSEXP, SEXP parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Yold(YoldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type parameter(parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_carfima_loglik(Yold, time, p, q, parameter));
    return rcpp_result_gen;
END_RCPP
}
// cpp_carfima_loglik_nosigma
Rcpp::List cpp_carfima_loglik_nosigma(arma::vec Yold, arma::vec time, int p, int q, arma::vec parameter);
RcppExport SEXP _carfima_cpp_carfima_loglik_nosigma(SEXP YoldSEXP, SEXP timeSEXP, SEXP pSEXP, SEXP qSEXP, SEXP parameterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type Yold(YoldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type time(timeSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type q(qSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type parameter(parameterSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_carfima_loglik_nosigma(Yold, time, p, q, parameter));
    return rcpp_result_gen;
END_RCPP
}
// rtruncnorm
double rtruncnorm(double mean, double sd, double lbd, double rbd);
RcppExport SEXP _carfima_rtruncnorm(SEXP meanSEXP, SEXP sdSEXP, SEXP lbdSEXP, SEXP rbdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< double >::type rbd(rbdSEXP);
    rcpp_result_gen = Rcpp::wrap(rtruncnorm(mean, sd, lbd, rbd));
    return rcpp_result_gen;
END_RCPP
}
// dtruncnorm
double dtruncnorm(double x, double mean, double sd, double lower, double upper);
RcppExport SEXP _carfima_dtruncnorm(SEXP xSEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(dtruncnorm(x, mean, sd, lower, upper));
    return rcpp_result_gen;
END_RCPP
}
